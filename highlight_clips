## Extracting Video Snippets for Highlight Events in EventMeasure

# This script extracts video snippets for highlight events tagged using "Attribute 9" and plain text "Comment"
# in species code files within EventMeasure software (https://www.seagis.com.au/event.html).
#
# Authors: jacquomo.monk@utas.edu.au, justin.hulls@utas.edu.au
#
# Prerequisites:
# - A folder containing all BRUV video files in a directory named "Converted".
# - A database export from EventMeasure with the following files in the working directory:
#   - "\3DPoints.txt"
#   - "\Period.txt"
# - A "\Metadata.csv" file structured according to GlobalArchive standards (see: https://marine-ecology.shinyapps.io/CheckEM/).
# - FFmpeg installed (https://www.ffmpeg.org/download.html).

# Clean up environment
rm(list=ls())

# Load required packages
library(tidyverse)
library(readxl)
library(lubridate)
library(sf)

# 1. Setup Working Directory
folder_path <- choose.dir() # Navigate to the working folder
setwd(folder_path)
getwd()

# 2. Define Metadata and Attributes
data.camera_model = "GoPro Hero10" #edit for your cameras
data.contact.primary ="neville.barrett@utas.edu.au" #add email for your primary contact person
data.contact.secondary = "jacquomo.monk@utas.edu.au" #add email for your secondary contact person	
data.funder = "Parks Australia"	#add funder names. If multiple delimit by semicolon
data.grant_no  = "DNP-MPA-2122-062" #(optional) add relevant grant numbers. If multiple delimit by semicolon

institute = "IMAS" #set this for your institute. should remain the same between uploads
platform = "IMAS_stereoROV" #set this for each platform format should remain the same between uploads 
campaign = "202408_Beagle_AMP" #set this for each campaign. format should remain the same between uploads
licence = "Creative Commons by Attribution-ShareAlike 4.0 International (CC BY-SA 4.0) ]" #Set as appropriate 

# 3. Setup Folder Structure
base_dir <- file.path(campaign)
folders <- c("Highlight_Video", "MaxN_Video", "Representative_Video")
for (folder in folders) {
  dir_path <- file.path(base_dir, folder)
  if (!dir.exists(dir_path)) {
    dir.create(dir_path, recursive = TRUE)
    message("Created folder: ", dir_path)
  } else {
    message("Folder already exists: ", dir_path)
  }
}

# 4. Load Marine Parks Shapefile (CAPAD for Australia)
mpa_url <- "https://gis.environment.gov.au/gispubmap/rest/services/ogc_services/CAPAD_Marine/MapServer/0/query?where=1%3D1&outFields=*&outSR=4326&f=json"
mpa <- st_read(mpa_url)
plot(mpa)
mpa <- st_make_valid(mpa)

# 5. Load Metadata File
meta <- read.csv(list.files(pattern = "*.csv")) %>%
  mutate(
    site = opcode,
    date_time = date_time,
    latitude = latitude_dd,
    longitude = longitude_dd,
    depth = depth_m, #needs to be a positive
    depth.zone = case_when(
      depth_m >= 0 & depth_m < 30 ~ "shallow",
      depth_m >= 30 & depth_m < 70 ~ "mesophotic",
      depth_m >= 70 & depth_m < 200 ~ "rariphotic",
      depth_m >= 200 & depth_m < 700 ~ "upper-slope",
      depth_m >= 700 & depth_m < 2000 ~ "mid-slope",
      depth_m >= 2000 & depth_m < 4000 ~ "lower-slope",
      depth_m >= 4000 & depth_m < 6000 ~ "abyss",
      depth_m >= 6000 ~ "hadal",
      TRUE ~ NA_character_
    ),
    camera_model = data.camera_model,
    contact.primary = data.contact.primary,
    contact.secondary = data.contact.secondary,
    licence = licence,
    funder = data.funder,
    grant.no = data.grant_no
  ) %>%
  select("site", "date_time", "latitude":"grant_no") %>%
  glimpse()

# 6. Perform Data Quality Checks
missing_values <- meta %>% summarise(across(everything(), ~ sum(is.na(.)))) %>% pivot_longer(everything(), names_to = "Column", values_to = "Missing_Count")
print("Missing values per column:")
print(missing_values)

duplicates <- meta %>%
  filter(duplicated(.))

if (nrow(duplicates) > 0) {
  print("Duplicate rows found:")
  print(duplicates)
} else {
  print("No duplicate rows found.")
}

# Convert Metadata to Spatial Points and Assign MPAs
meta_sf <- st_as_sf(meta, coords = c("longitude", "latitude"), crs = 4326)
meta_mpa <- st_join(meta_sf, mpa, left = TRUE) %>%
  mutate(Name = replace_na(NAME, "Open"), IUCN = replace_na(IUCN, "Open")) %>%
  select(site, date_time, depth, depth.zone, camera_model, contact.primary, contact.secondary, licence, funder, grant_no, Name, IUCN) %>%
  as.data.frame() %>%
  select(!geometry) %>%
  glimpse()

# 7. Extract Frame Rates from Video Files
video_dir <- file.path(getwd(), "Converted")
video_files <- list.files(video_dir, pattern = "\\.(MP4|AVI)$", full.names = TRUE, ignore.case = TRUE)

get_video_fps <- function(video_path) {
  command <- paste("ffprobe -i", shQuote(video_path), "-show_entries stream=r_frame_rate -v quiet -of csv=\"p=0\"")
  fps <- system(command, intern = TRUE)
  fps_values <- as.numeric(unlist(strsplit(fps, "/")))
  fps_rate <- fps_values[1] / fps_values[2]
  return(fps_rate)
}

fps_table <- data.frame(Video = video_files, FPS = sapply(video_files, get_video_fps)) %>% mutate(Filename = basename(Video)) %>% glimpse()

# 8. Read EventMeasure 3DPoints File for Highlight Events
file_path <- list.files(pattern = "3DPoints.*\\.txt$", full.names = TRUE)
if (length(file_path) == 0) {
  stop("No 3DPoints.txt file found in the directory.")
} else {
  message("Found file: ", file_path)
}
